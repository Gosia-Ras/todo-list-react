{"version":3,"sources":["reportWebVitals.js","GlobalStyle.js","theme.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","common/Container/styled.js","common/Container/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/AuthorPage/styled.js","features/AuthorPage/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","routes.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/remainingTasksCounter.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","common/Navigation/styled.js","common/Navigation/index.js","common/Footer/styled.js","common/Footer/index.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","theme","color","grey","primary","secondary","tertiary","quaternary","primaryHover","button","complete","remove","hoverGreen","hoverRed","disabled","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","isLoading","reducers","addTask","newTask","payload","push","toggleHideDone","state","hideDone","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","deleteTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksError","fetchExampleTasksSuccess","selectTasksState","actions","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsLoading","selectIsEveryTaskDone","every","selectSomeTasksDone","some","selectTasksByQuery","query","trim","filter","content","toUpperCase","includes","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","exampleTasksWithNewIds","map","nanoid","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","StyledContainer","styled","main","Container","children","MainHeader","header","Header","title","StyledSection","section","StyledLayout","div","StyledSectionBody","SectionParagraph","p","Section","body","extraHeaderContent","taskcount","LinkIG","ternary","AuthorPage","href","rel","target","Button","StyledForm","form","input","quarternay","quarternary","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","date","Date","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","time","toLocaleDateString","weekday","hour","minute","second","day","month","onClick","current","focus","value","placeholder","onChange","ref","List","ul","Item","li","hidden","css","StyledLink","Link","Span","span","toggleDone","searchQueryParamName","toAuthor","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","useSelector","to","Buttons","areTasksEmpty","isEveryTaskDone","someTasksDone","Wrapper","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","ExampleTasksButton","loading","RemainingTasksCounter","tasksRemaining","setTasksRemaining","useEffect","TasksPage","TaskPage","useParams","taskId","find","getTaskById","indexOf","StyledNavLink","NavLink","StyledNavigation","StyledNavigationItem","Navigation","exact","StyledFooter","footer","Footer","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4e2d6e8.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n  box-sizing: border-box;\r\n}\r\n\r\n    *, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\n    body {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background-color: ${({ theme }) => theme.color.grey};\r\n`;\r\n","const colorNames = {\r\n  teal: \"#0FA39C\",\r\n  persianGreen: \"#2bcbba\",\r\n  white: \"#FFFFFF\",\r\n  funGreen: \"#20bf6b\",\r\n  salem: \"#26de81\",\r\n  pomegranateRed: \"#eb3b5a\",\r\n  redOrange: \"#fc5c65\",\r\n  grey: \"#F5F5F5\",\r\n  black: \"#292319\",\r\n  mercuryGray: \"#c0c2c5\",\r\n};\r\n\r\nexport const theme = {\r\n  color: {\r\n    primary: colorNames.teal,\r\n    secondary: colorNames.grey,\r\n    tertiary: colorNames.black,\r\n    quaternary: colorNames.white,\r\n    primaryHover: colorNames.persianGreen,\r\n  },\r\n  button: {\r\n    complete: colorNames.salem,\r\n    remove: colorNames.pomegranateRed,\r\n    hoverGreen: colorNames.funGreen,\r\n    hoverRed: colorNames.redOrange,\r\n    disabled: colorNames.mercuryGray,\r\n  },\r\n};\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    isLoading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: newTask }) => {\r\n      tasks.push(newTask);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: (state, action) => {\r\n      const index = state.tasks.findIndex((task) => task.id === action.payload);\r\n      state.tasks[index].done = !state.tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: deleteTask }) => {\r\n      const index = tasks.findIndex(({ id }) => id === deleteTask);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasks: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    fetchExampleTasksError: (state) => {\r\n      state.isLoading = false;\r\n    },\r\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst selectTasksState = (state) => state.tasks;\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  fetchExampleTasksError,\r\n  fetchExampleTasksSuccess,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = (state) => selectTasks(state).length === 0;\r\nexport const selectIsLoading = (state) => selectTasksState(state).isLoading;\r\nexport const selectIsEveryTaskDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done);\r\nexport const selectSomeTasksDone = (state) =>\r\n  selectTasks(state).some(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n  selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase())\r\n  );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n","import {\r\n  call,\r\n  delay,\r\n  put,\r\n  select,\r\n  takeEvery,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport {\r\n  fetchExampleTasks,\r\n  fetchExampleTasksError,\r\n  fetchExampleTasksSuccess,\r\n  selectTasks\r\n} from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    const exampleTasksWithNewIds = exampleTasks.map((task) => ({\r\n      ...task,\r\n      id: nanoid(),\r\n    }));\r\n    yield put(fetchExampleTasksSuccess(exampleTasksWithNewIds));\r\n  } catch (error) {\r\n    yield put(fetchExampleTasksError());\r\n    yield call(alert, \"Ooops, looks like we can't load it. Please check your internet connection :)\");\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  min-height: 100vh;\r\n  border: 1px solid ${({ theme }) => theme.color.secondary};\r\n\r\n  @media (max-width: 767px) {\r\n    height: max-content;\r\n  }\r\n`;\r\n","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <StyledContainer>{children}</StyledContainer>\r\n);\r\nexport default Container;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MainHeader = styled.header`\r\n  @media (max-width: 768px) {\r\n    text-align: center;\r\n  } ;\r\n`;","import { MainHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <MainHeader>\r\n    <h1>{title}</h1>\r\n  </MainHeader>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  display: grid;\r\n`;\r\n\r\nexport const StyledLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  padding: 0 0 0 15px;\r\n  background-color: ${({ theme }) => theme.color.quaternary};\r\n  border-top: 1px solid ${({ theme }) => theme.color.secondary};\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.secondary};\r\n\r\n  @media (max-width: 767px) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 3px;\r\n  }\r\n`;\r\n\r\nexport const StyledSectionBody = styled.div`\r\n  padding: 20px;\r\n  background-color: ${({ theme }) => theme.color.quaternary};\r\n`;\r\n\r\nexport const SectionParagraph = styled.p`\r\n  font-size: 19px;\r\n  padding: 0;\r\n  @media (max-width: 767px) {\r\n    text-align: center;\r\n  }\r\n`;\r\n","import { StyledLayout, StyledSection, StyledSectionBody } from \"./styled.js\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <StyledLayout>\r\n      <h2>{title}</h2>\r\n      {extraHeaderContent}\r\n    </StyledLayout>\r\n    <StyledSectionBody taskcount>{body}</StyledSectionBody>\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const LinkIG = styled.a`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.color.ternary};\r\n`;","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport { LinkIG } from \"./styled\";\r\n\r\nexport const AuthorPage = () => (\r\n  <Container>\r\n    <Header title=\"About me\" />\r\n    <Section\r\n      title=\"Gosia Ras\"\r\n      body={\r\n        <>\r\n          <p>\r\n            &#128062; Cat mom living in <strong>Switzerland</strong> with a goal\r\n            of becoming a <strong>front-end developer</strong>. This project is\r\n            a part of my course at <strong>YouCode</strong>.\r\n          </p>\r\n          <p>\r\n            In my free time I play video games and like to dabble in{\" \"}\r\n            <em>smartphone photography</em> and post it on my IG\r\n          </p>\r\n          <LinkIG\r\n            href=\"https://www.instagram.com/diary_of_gosia/\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            @diary_of_gosia\r\n          </LinkIG>\r\n        </>\r\n      }\r\n    />\r\n  </Container>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ theme }) => theme.color.primary};\r\n  color: ${({ theme }) => theme.color.secondary};\r\n  padding: 10px;\r\n  transition: background 1s, transform 1s;\r\n  border: none;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.button.primaryHover};\r\n    transform: scale(1.1);\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 10px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  background-color: ${({ theme }) => theme.color.quarternay};\r\n  border: 1px solid rgb(220, 220, 220);\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n  padding: 10px;\r\n  background-color: ${({ theme }) => theme.color.quarternary};\r\n  border: 1px solid ${({ theme }) => theme.color.secondary};\r\n\r\n  @media (max-width: 767px) {\r\n    text-align: center;\r\n  }\r\n`;\r\n","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice.js\";\r\nimport { Button, StyledForm } from \"./styled.js\";\r\nimport Input from \"../Input/index\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const date = new Date();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: trimmedNewTaskContent,\r\n        done: false,\r\n        id: nanoid(),\r\n        time: date.toLocaleDateString(\"en-GB\", {\r\n          weekday: \"long\",\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n          second: \"2-digit\",\r\n          day: \"numeric\",\r\n          month: \"long\",\r\n        }),\r\n      })\r\n    );\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit} onClick={focusInput}>\r\n      <Input\r\n        value={newTaskContent}\r\n        type=\"text\"\r\n        placeholder=\"What do you have to do?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <Button>Add new task</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n  background-color: ${({ theme }) => theme.color.quarternary};\r\n  list-style: none;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.secondary};\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `};\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.color.tertiary};\r\n\r\n  &:hover {\r\n    color: ${({ theme }) => theme.color.primary};\r\n  }\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  overflow-wrap: anywhere;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  color: white;\r\n  border: none;\r\n\r\n  ${({ toggleDone }) =>\r\n    toggleDone &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.button.complete};\r\n      transition: background 1s;\r\n\r\n      &:hover {\r\n        background-color: ${({ theme }) => theme.button.hoverGreen};\r\n        cursor: pointer;\r\n      }\r\n    `}\r\n\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.button.remove};\r\n      transition: background 1s;\r\n\r\n      &:hover {\r\n        background-color: ${({ theme }) => theme.button.hoverRed};\r\n        cursor: pointer;\r\n      }\r\n    `}\r\n`;\r\n","const searchQueryParamName = \"search\";\r\n\r\nexport default searchQueryParamName;\r\n","export const toTasks = () => \"/tasks\";\r\nexport const toAuthor = () => \"/author\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/tasks/${id}`;\r\n","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  return searchParams.get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    if (value === undefined) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n    const newSearch = searchParams.toString();\r\n\r\n    history.push(`${location.pathname}?${newSearch}`);\r\n  };\r\n};\r\n","import { List, Item, Span, Button, StyledLink } from \"./styled.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  selectTasksByQuery,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  selectHideDone,\r\n} from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName.js\";\r\nimport { toTask } from \"../../../../routes.js\";\r\nimport { useQueryParameter } from \"../queryParameters.js\";\r\n\r\nconst TaskList = () => {\r\n  \r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <Button onClick={() => dispatch(toggleTaskDone(task.id))} toggleDone>\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Span done={task.done}>\r\n            <StyledLink to={toTask({ id: task.id })}>\r\n              {task.content}\r\n            </StyledLink>\r\n          </Span>\r\n          <Button onClick={() => dispatch(removeTask(task.id))} remove>\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const Section = styled.section`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  transition: background 1s;\r\n  border: none;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  ${({ secondary }) =>\r\n    secondary &&\r\n    css`\r\n      background-color: transparent;\r\n      color: ${({ theme }) => theme.color.primary};\r\n      transition: color 1s;\r\n      margin: 0 10px 0 0;\r\n\r\n      &:hover {\r\n        color: ${({ theme }) => theme.button.primaryHover};\r\n      }\r\n\r\n      &:disabled {\r\n        color: ${({ theme }) => theme.button.disabled};\r\n        cursor: not-allowed;\r\n      }\r\n    `}\r\n`;\r\n","import { Button, Section } from \"./styled.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectAreTasksEmpty,\r\n  selectIsEveryTaskDone,\r\n  selectHideDone,\r\n  selectSomeTasksDone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const someTasksDone = useSelector(selectSomeTasksDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Section>\r\n      {!areTasksEmpty > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n            disabled={!someTasksDone}\r\n            secondary\r\n          >\r\n            {hideDone ? \"Show\" : \"Hide\"} finished tasks\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n            secondary\r\n          >\r\n            Mark all done\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n","import Input from \"../Input/index\";\r\nimport { Wrapper } from \"./styled\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\n\r\nexport const Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const OnInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Filter tasks by name\"\r\n        value={query || \"\"}\r\n        onChange={OnInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchExampleTasks, selectIsLoading } from \"../../tasksSlice\";\r\nimport { Button } from \"../Buttons/styled\";\r\n\r\nconst ExampleTasksButton = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectIsLoading);\r\n\r\n  return (\r\n    <Button\r\n      secondary\r\n      disabled={loading}\r\n      onClick={() => dispatch(fetchExampleTasks())}\r\n    >\r\n      {loading ? \"Loading...\" : \"Get example tasks\"}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ExampleTasksButton;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTasksByQuery } from \"./tasksSlice\";\r\nimport { SectionParagraph } from \"../../common/Section/styled\";\r\n\r\nexport const RemainingTasksCounter = () => {\r\n  const [tasksRemaining, setTasksRemaining] = useState(0);\r\n  const tasks = useSelector((state) => selectTasksByQuery(state));\r\n\r\n  useEffect(() => {\r\n    if (tasks) setTasksRemaining(tasks.filter((task) => !task.done).length);\r\n  }, [tasks]);\r\n\r\n  return (\r\n    <SectionParagraph>\r\n      <strong>Tasks to complete: </strong> {tasksRemaining}\r\n    </SectionParagraph>\r\n  );\r\n};\r\n","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\nimport ExampleTasksButton from \"./ExampleTasksButton\";\r\nimport { RemainingTasksCounter } from \"../remainingTasksCounter\";\r\n\r\nfunction TasksPage() {\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Header title=\"To-Do List\" />\r\n        <Section\r\n          title=\"Add new task\"\r\n          extraHeaderContent={<ExampleTasksButton />}\r\n          body={<Form />}\r\n        />\r\n        <Section title=\"Search tasks\" body={<Search />} />\r\n        <Section title=\"Task counter\"body={RemainingTasksCounter()} />\r\n        <Section\r\n          title=\"Task list\"\r\n          body={<TaskList />}\r\n          extraHeaderContent={<Buttons />}\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById, selectTasks } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => getTaskById(state, id));\r\n  const tasks = useSelector(selectTasks);\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Task details\" />\r\n      <Section\r\n        title={task ? task.content : \"Task not found 🧭 Please come back later\"}\r\n        body={\r\n          !!task && (\r\n            <>\r\n              <p>\r\n                <strong>Completed:</strong> {task.done ? \"Yes\" : \"No\"}\r\n              </p>\r\n              <p>\r\n                <strong>Task number: </strong>\r\n                {tasks.indexOf(task) + 1}\r\n              </p>\r\n              <p>\r\n                <strong>Task added on:</strong>\r\n                {task.time}\r\n              </p>\r\n            </>\r\n          )\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\nexport default TaskPage;\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.color.quaternary};\r\n  font-size: larger;\r\n\r\n  &.active {\r\n    font-weight: bold;\r\n  }\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nexport const StyledNavigation = styled.ul`\r\n  list-style-type: none;\r\n  display: flex;\r\n  justify-content: center;\r\n  background-color: ${({ theme }) => theme.color.primary};\r\n  padding: 15px;\r\n  margin-top: 0;\r\n`;\r\n\r\nexport const StyledNavigationItem = styled.li`\r\n  margin: 10px;\r\n`;\r\n","import { toAuthor, toTasks } from \"../../routes\";\r\nimport {\r\n  StyledNavigation,\r\n  StyledNavigationItem,\r\n  StyledNavLink,\r\n} from \"./styled\";\r\n\r\nexport const Navigation = () => (\r\n  <nav>\r\n    <StyledNavigation>\r\n      <StyledNavigationItem>\r\n        <StyledNavLink exact to={toTasks()}>\r\n          Tasks\r\n        </StyledNavLink>\r\n      </StyledNavigationItem>\r\n      <StyledNavigationItem>\r\n        <StyledNavLink exact to={toAuthor()}>\r\n          About me\r\n        </StyledNavLink>\r\n      </StyledNavigationItem>\r\n    </StyledNavigation>\r\n  </nav>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n  text-align: center;\r\n  background-color: ${({ theme }) => theme.color.primary};\r\n  padding: 10px;\r\n  font-size: small;\r\n  font-style: italic;\r\n  margin-top: 50px;\r\n  color: ${({ theme }) => theme.color.quaternary};\r\n`;\r\n","import { StyledFooter } from \"./styled\";\r\n\r\nconst Footer = ({ title }) => (\r\n    <StyledFooter>\r\n        {title}\r\n    </StyledFooter>\r\n);\r\n\r\nexport default Footer;","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { AuthorPage } from \"../src/features/AuthorPage/\";\r\nimport TasksPage from \"../src/features/tasks/TasksPage/index\";\r\nimport TaskPage from \"../src/features/tasks/TaskPage/index\";\r\nimport { Navigation } from \"./common/Navigation\";\r\nimport Footer from \"./common/Footer\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\n\r\nexport const App = () => (\r\n  <>\r\n    <HashRouter>\r\n      <Navigation />\r\n      <Switch>\r\n        <Route path={toTask()}>\r\n          <TaskPage />\r\n        </Route>\r\n        <Route path={toTasks()}>\r\n          <TasksPage />\r\n        </Route>\r\n        <Route path={toAuthor}>\r\n          <AuthorPage />\r\n        </Route>\r\n        <Route>\r\n          <Redirect to={toTasks()} />\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n    <Footer title=\"Coded in 2022 by Gosia Ras\" />\r\n  </>\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport { theme } from \"./theme\";\r\n\r\nimport store from \"./store\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </Provider>\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}