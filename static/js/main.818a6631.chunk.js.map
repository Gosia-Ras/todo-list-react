{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","App.js","reportWebVitals.js","GlobalStyle.js","index.js"],"names":["Button","styled","button","StyledForm","form","Input","input","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","value","type","placeholder","onChange","target","ref","disabled","onClick","current","focus","List","ul","Item","li","hidden","css","Span","span","done","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","id","content","Section","section","secondary","Buttons","toggleHideDone","setAllDone","length","some","every","StyledSection","StyledLayout","div","StyledSectionBody","title","body","extraHeaderContent","Header","StyledContainer","main","Container","children","App","setHideDone","tasksLocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.818a6631.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  background-color: teal;\r\n  color: rgb(230, 230, 230);\r\n  padding: 10px;\r\n  transition: background 1s, transform 1s;\r\n\r\n  &:hover {\r\n    background-color: hsl(180, 100%, 30%);\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 10px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  background-color: white;\r\n  border: 1px solid rgb(220, 220, 220);\r\n`;\r\n","import { useState, useRef } from \"react\";\r\nimport { Button, StyledForm, Input } from \"./styled.js\"\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    addNewTask(newTaskContent.trim());\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        type=\"text\"\r\n        placeholder=\"What do you have to do?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <Button\r\n        disabled={newTaskContent.trim() === \"\"}\r\n        onClick={focusInput}\r\n      >\r\n        Add new task\r\n      </Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  background-color: white;\r\n  list-style: none;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  border-bottom: 1px solid rgb(218, 218, 218);\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `};\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  overflow-wrap: anywhere;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  color: white;\r\n\r\n  ${({ toggleDone }) =>\r\n    toggleDone &&\r\n    css`\r\n      background-color: hsl(120, 100%, 25%);\r\n      transition: background 1s;\r\n\r\n      &:hover {\r\n        background-color: hsl(120, 100%, 35%);\r\n      }\r\n    `}\r\n\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: rgb(210, 5, 15);\r\n      transition: background 1s;\r\n\r\n      &:hover {\r\n        background-color: hsl(357, 95%, 50%)\r\n      }\r\n    `}\r\n`;\r\n","import { List, Item, Span, Button } from \"./styled.js\"\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <List>\r\n    {tasks.map((task) => (\r\n      <Item\r\n        key={task.id}\r\n        hidden={task.done && hideDone}\r\n      >\r\n        <Button\r\n          onClick={() => toggleTaskDone(task.id)}\r\n          toggleDone\r\n        >\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </Button>\r\n        <Span \r\n        done={task.done}>\r\n          {task.content}\r\n        </Span>\r\n        <Button\r\n          onClick={ () => removeTask(task.id)}\r\n          remove\r\n        >\r\n          ðŸ—‘\r\n        </Button>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default Tasks;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const Section = styled.section`\r\n\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  transition: background 1s;\r\n  border: none;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  ${({ secondary }) =>\r\n    secondary &&\r\n    css`\r\n      background-color: transparent;\r\n      color: hsl(180, 100%, 25%);\r\n      transition: color 1s;\r\n      margin: 0 10px 0 0;\r\n\r\n      &:hover {\r\n        color: hsl(180, 100%, 30%);\r\n      }\r\n\r\n      &:disabled {\r\n        color: grey;\r\n      }\r\n    `}\r\n`;\r\n","import {Button, Section} from \"./styled.js\"\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) =>\r\n  tasks.length > 0 && (\r\n    <Section>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={toggleHideDone}\r\n            disabled={!tasks.some(({ done }) => done)}\r\n            secondary\r\n          >\r\n            {hideDone ? \"Show\" : \"Hide\"} finished tasks\r\n          </Button>\r\n          <Button\r\n            onClick={setAllDone}\r\n            disabled={tasks.every(({ done }) => done)}\r\n            secondary\r\n          >\r\n            Mark all done\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Section>\r\n  );\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  display: grid;\r\n  grid-template-rows: auto minmax(50px, 1fr);\r\n  grid-gap: 5px;\r\n`;\r\n\r\nexport const StyledLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  padding: 0 0 0 15px;\r\n  background-color: white;\r\n`;\r\n\r\nexport const StyledSectionBody = styled.div`\r\n  padding: 20px;\r\n  background-color: white;\r\n`;\r\n","import {StyledLayout, StyledSection, StyledSectionBody} from \"./styled.js\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <StyledSection>\r\n    <StyledLayout>\r\n      <h2>{title}</h2>\r\n      {extraHeaderContent}\r\n    </StyledLayout>\r\n    <StyledSectionBody>{body}</StyledSectionBody>\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>\r\n      {title}\r\n    </h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n  display: grid;\r\n  grid-template-rows: auto 1fr;\r\n  grid-gap: 10px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n`;\r\n","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\nexport default Container;","import { useEffect, useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Container from \"./Container\";\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false);\r\n\r\n  const tasksLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n  const [tasks, setTasks] = useState(\r\n    tasksLocalStorage ? JSON.parse(tasksLocalStorage) : []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone((hideDone) => !hideDone);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done };\r\n        }\r\n\r\n        return task;\r\n      })\r\n    );\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) => ({\r\n        ...task,\r\n        done: true,\r\n      }))\r\n    );\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks((tasks) => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"To-Do List\" />\r\n      <Section title=\"Add new task\" body={<Form addNewTask={addNewTask} />} />\r\n      <Section\r\n        title=\"Task list\"\r\n        body={\r\n          <Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toggleHideDone={toggleHideDone}\r\n            setAllDone={setAllDone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n  box-sizing: border-box;\r\n}\r\n\r\n    *, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\n    body {\r\n  font-family: 'Montserrat', sans-serif;\r\n  background-color: #eee;\r\n}\r\n`;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {GlobalStyle} from './GlobalStyle'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}